// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../react-contenteditable

declare module '@tenforce/toolbox-field-react' {
    import FieldItems from "@tenforce/toolbox-field-react/FieldItems";
    export { Field, Label, Description, Items, ContentEditable, Input, ReadOnly, TextArea, } from "@tenforce/toolbox-field-react/Field";
    export { FieldItems };
}

declare module '@tenforce/toolbox-field-react/FieldItems' {
    import * as React from "react";
    import { Props as DescriptionProps } from "@tenforce/toolbox-field-react/Field/Description";
    import { Props as FieldProps } from "@tenforce/toolbox-field-react/Field/Field";
    import { Props as ItemsProps } from "@tenforce/toolbox-field-react/Field/Items";
    import { Props as LabelProps } from "@tenforce/toolbox-field-react/Field/Label";
    export interface Props extends FieldProps {
        description?: React.ReactNode;
        descriptionProps?: DescriptionProps;
        itemsProps?: ItemsProps;
        label?: React.ReactNode;
        labelProps?: LabelProps;
    }
    export const FieldItems: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
    export default FieldItems;
}

declare module '@tenforce/toolbox-field-react/Field' {
    import ContentEditable from "@tenforce/toolbox-field-react/Field/ContentEditable";
    import Description from "@tenforce/toolbox-field-react/Field/Description";
    import Field from "@tenforce/toolbox-field-react/Field/Field";
    import Input from "@tenforce/toolbox-field-react/Field/Input";
    import Items from "@tenforce/toolbox-field-react/Field/Items";
    import Label from "@tenforce/toolbox-field-react/Field/Label";
    import ReadOnly from "@tenforce/toolbox-field-react/Field/ReadOnly";
    import TextArea from "@tenforce/toolbox-field-react/Field/TextArea";
    export { Field, Label, Description, Items, ContentEditable, Input, ReadOnly, TextArea, };
}

declare module '@tenforce/toolbox-field-react/Field/Description' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
    }
    export default class Description extends React.PureComponent<Props> {
        static defaultProps: Partial<Props>;
        render(): JSX.Element;
    }
}

declare module '@tenforce/toolbox-field-react/Field/Field' {
    import * as React from "react";
    export const className = "toolbox-field";
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        hasWhiteBackground?: boolean;
        isInverted?: boolean;
        showPreview?: boolean;
        extraClasses?: string;
    }
    export const Field: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLDivElement>>;
    export default Field;
}

declare module '@tenforce/toolbox-field-react/Field/Items' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
    }
    export default class Items extends React.PureComponent<Props> {
        static defaultProps: Partial<Props>;
        render(): JSX.Element;
    }
}

declare module '@tenforce/toolbox-field-react/Field/Label' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
        isRequired?: boolean;
        reqiredIndicatorText?: React.ReactNode;
    }
    export default class Label extends React.PureComponent<Props> {
        static defaultProps: Partial<Props>;
        render(): JSX.Element;
    }
}

declare module '@tenforce/toolbox-field-react/Field/ContentEditable' {
    import * as React from "react";
    import { ContentEditableEvent, Props as ContentEditableProps } from "react-contenteditable";
    export const className: string;
    export interface Props extends Partial<ContentEditableProps> {
        isLoading?: boolean;
        isDisabled?: boolean;
        extraClasses?: string;
        value: string;
        onChange?: (event: ContentEditableEvent) => void;
        onChangedValue?: (value: string) => unknown;
    }
    const ContentEditable: React.ForwardRefExoticComponent<Pick<Props, "extraClasses" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "hidden" | "id" | "lang" | "nonce" | "placeholder" | "slot" | "spellCheck" | "style" | "tabIndex" | "title" | "translate" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "color" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "html" | "key" | "disabled" | "tagName" | "innerRef" | "isLoading" | "isDisabled" | "value" | "onChangedValue"> & React.RefAttributes<HTMLElement>>;
    export default ContentEditable;
}

declare module '@tenforce/toolbox-field-react/Field/Input' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.InputHTMLAttributes<HTMLInputElement> {
        isLoading?: boolean;
        isDisabled?: boolean;
        placeholder?: string;
        extraClasses?: string;
        value: string;
        onChangedValue?: (value: string) => unknown;
        onChange?: React.ChangeEventHandler;
        onFocus?: React.FocusEventHandler;
        onBlur?: React.FocusEventHandler;
    }
    const Input: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLInputElement>>;
    export default Input;
}

declare module '@tenforce/toolbox-field-react/Field/ReadOnly' {
    import * as React from "react";
    export const className: string;
    export interface Props extends React.HTMLAttributes<HTMLDivElement> {
        extraClasses?: string;
        preserveWhitespace?: boolean;
        isLoading?: boolean;
        shouldAllowHTML?: boolean;
        value: string | number | boolean | JSX.Element;
    }
    export default class ReadOnly extends React.PureComponent<Props> {
        static defaultProps: Partial<Props>;
        render(): JSX.Element;
    }
}

declare module '@tenforce/toolbox-field-react/Field/TextArea' {
    import * as React from "react";
    export const className: string;
    type AutosizeStyle = Omit<NonNullable<React.TextareaHTMLAttributes<HTMLTextAreaElement>["style"]>, "maxHeight" | "minHeight"> & {
        height?: number;
    };
    export type TextareaHeightChangeMeta = {
        rowHeight: number;
    };
    export interface AutosizeProps {
        maxRows?: number;
        minRows?: number;
        onHeightChange?: (height: number, meta: TextareaHeightChangeMeta) => void;
        cacheMeasurements?: boolean;
        style?: AutosizeStyle;
    }
    export interface Props extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
        isLoading?: boolean;
        isDisabled?: boolean;
        placeholder?: string;
        autoSize?: boolean;
        extraClasses?: string;
        value: string;
        onChangedValue?: (value: string) => unknown;
        onChange?: React.FormEventHandler;
        onFocus?: React.FocusEventHandler;
        onBlur?: React.FocusEventHandler;
        autosizeProps?: AutosizeProps;
    }
    const TextArea: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLTextAreaElement>>;
    export default TextArea;
}

